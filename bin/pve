#!/usr/bin/env bash

#
# Setup.
#
version="0.0.2"
UP=$'\033[A'
DOWN=$'\033[B'
PVE_PREFIX=${PVE_PREFIX-/usr/local}
BASE_VIRTUALENVS_DIR=$PVE_PREFIX/pve/virtualenvs

#
# Log <type> <msg>
#
log() {
    printf "  \033[36m%10s\033[0m : \033[90m%s\033[0m\n" "$1" "$2"
}

#
# Exit with the given <msg ...>
#
abort() {
    printf "\n  \033[31mError: $@\033[0m\n\n" && exit 1
}

#
# Print a (differentiable from log) success message.
#
success() {
    printf "\n  \033[32mSuccess: $@\033[0m\n\n"
}


#
# Functions used when showing virtualenvs installed
#
enter_fullscreen() {
    tput smcup
    stty -echo
}

leave_fullscreen() {
    tput rmcup
    stty echo
}

handle_sigint() {
    leave_fullscreen
    exit $?
}

handle_sigtstp() {
    leave_fullscreen
    kill -s SIGSTOP $$
}

#
# Output usage information.
#
display_help() {
  cat <<-EOF
  Usage: pve [COMMAND] [args]

  Commands:
    pve                            Output Virtualenvs Installed
    pve new <anme>                 Create New Virtualenvs <name>
    pve <name>                     Activate to Vitualenv <name>
    pve rm <anme>                  Remove the Given Vitualenv <name>

  Options:
    -h, --help      Display help information
EOF
    exit 0
}

#
# Hide cursor.
#
hide_cursor() {
    printf "\e[?25l"
}

#
# Show cursor.
#
show_cursor() {
    printf "\e[?25h"
}

#
# Output virtualenv after selected.
#
next_virtualenv_installed() {
    list_virtualenvs_installed | grep $selected -A 1 | tail -n 1
}

#
# Output virtualenv before selected.
#
prev_virtualenv_installed() {
    list_virtualenvs_installed | grep $selected -B 1 | head -n 1
}

#
# Display sorted virtualenvs directories paths.
#
virtualenvs_paths() {
    find $BASE_VIRTUALENVS_DIR -maxdepth 1 -mindepth 1 -type d \
    | sed 's|'$BASE_VIRTUALENVS_DIR'/||g'
}

#
# Display installed virtualenvs with <selected>
#
display_virtualenvs_with_selected() {
    selected=$1
    echo
    for virtualenv in $(virtualenvs_paths); do
        virtualenv=${virtualenv}
        if test "$virtualenv" = "$selected"; then
            printf "  \033[36mÎ¿\033[0m $virtualenv\033[0m\n"
        else
            printf "    \033[90m$virtualenv\033[0m\n"
        fi
    done
    echo
}

#
# List installed virtualenvs.
#
list_virtualenvs_installed() {
    for virtualenv in $(virtualenvs_paths); do
        echo ${virtualenv}
    done
}

#
# Display current python --virtualenv and others installed.
#
display_virtualenvs() {
    for virtualenv in $(virtualenvs_paths); do
        last=${virtualenv}
    done
    enter_fullscreen
    display_virtualenvs_with_selected $last

    trap handle_sigint INT
    trap handle_sigtstp SIGTSTP

    while true; do
        read -n 3 c
        case "$c" in
            $UP)
            clear
            display_virtualenvs_with_selected $(prev_virtualenv_installed)
            ;;
            $DOWN)
            clear
            display_virtualenvs_with_selected $(next_virtualenv_installed)
            ;;
            *)
            activate $selected
            exit
            ;;
        esac
    done
}

#
# Move up a line and erase.
#
erase_line() {
    printf "\033[1A\033[2K"
}


#
# Activate <virtualenv>
#
activate() {
    local virtualenv=$1
    source $BASE_VIRTUALENVS_DIR/$virtualenv/bin/activate
    leave_fullscreen
    bash
}


#
# Install <virtualenv>
#
install() {
    local virtualenv=$1
    virtualenv $BASE_VIRTUALENVS_DIR/$virtualenv
}

#
# Remove <virtualenv>
#
remove_virtualenvs() {
    local virtualenv=$1
    rm -rf $BASE_VIRTUALENVS_DIR/$virtualenv
}

#
# Handle arguments.
#
if test $# -eq 0; then
    test -z "$(virtualenvs_paths)" && abort "no installed virtualenv"
    display_virtualenvs
else
    while test $# -ne 0; do
        case $1 in
            -h|--help|help) display_help ;;
            new|-) shift; install $@; exit ;;
            rm|-) shift; remove_virtualenvs $@; exit ;;
            *) activate $@; exit ;;
        esac
        shift
    done
fi